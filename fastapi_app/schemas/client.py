# schemas/cliente.py
from pydantic import BaseModel, EmailStr, validator
from typing import Optional, List
from schemas.equipo import EquipoOut  # ðŸ‘ˆ importamos el schema de Equipo


class ClientBase(BaseModel):
    nombre_completo: str
    telefono: str
    correo: Optional[EmailStr] = None  # valida automÃ¡ticamente el formato de correo

    # ðŸ”¹ Validaciones personalizadas
    @validator("nombre_completo")
    def nombre_no_vacio(cls, v: str):
        if not v.strip():
            raise ValueError("El nombre del cliente no puede estar vacÃ­o")
        return v

    @validator("telefono")
    def telefono_valido(cls, v: str):
        if not v.isdigit():
            raise ValueError("El telÃ©fono debe contener solo dÃ­gitos")
        if len(v) < 8:
            raise ValueError("El telÃ©fono debe tener al menos 8 dÃ­gitos")
        return v


class ClientCreate(ClientBase):
    """Esquema para creaciÃ³n de clientes"""
    pass


class ClientUpdate(BaseModel):
    """Esquema para actualizaciÃ³n parcial de clientes"""
    nombre_completo: Optional[str] = None
    telefono: Optional[str] = None
    correo: Optional[EmailStr] = None

    # âœ… Si se envÃ­a un nombre, validamos que no estÃ© vacÃ­o
    @validator("nombre_completo")
    def nombre_no_vacio(cls, v: Optional[str]):
        if v is not None and not v.strip():
            raise ValueError("El nombre del cliente no puede estar vacÃ­o")
        return v

    # âœ… ValidaciÃ³n opcional del telÃ©fono
    @validator("telefono")
    def telefono_valido(cls, v: Optional[str]):
        if v is not None:
            if not v.isdigit():
                raise ValueError("El telÃ©fono debe contener solo dÃ­gitos")
            if len(v) < 8:
                raise ValueError("El telÃ©fono debe tener al menos 8 dÃ­gitos")
        return v


class ClientOut(ClientBase):
    """Respuesta al consultar clientes"""
    id: int
    equipos: List[EquipoOut] = []  # ðŸ‘ˆ relaciÃ³n Cliente â†’ lista de equipos

    class Config:
        orm_mode = True  # âœ… permite convertir modelos SQLAlchemy a Pydantic
